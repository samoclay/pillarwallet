version: 2
aliases:
  - &restore_pod_cache
    restore_cache:
      keys:
        - ios-pods-{{ checksum "./ios/Podfile.lock" }}
  - &install_pods
    run:
      name: Install CocoaPods
      command: cd ios && bundle exec pod check || ((curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf) && bundle exec pod install)
  - &save_pod_cache
    save_cache:
      key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
      paths:
        - ./ios/Pods

  - &restore_gems_cache_ios
    restore_cache:
      name: Restore cache
      keys:
        - ios-gems-{{ checksum "Gemfile.lock" }}
  - &restore_gems_cache_android
    restore_cache:
      name: Restore cache
      keys:
        - android-gems-{{ checksum "Gemfile.lock" }}
  - &install_gems_ios
    run:
      name: Bundle install
      command: cd ios && bundle check || bundle install --path vendor/bundle
      environment:
        BUNDLE_JOBS: 4
        BUNDLE_RETRY: 3
  - &install_gems_android
    run:
      name: Bundle install
      command: cd android && bundle check || bundle install --path vendor/bundle
      environment:
        BUNDLE_JOBS: 4
        BUNDLE_RETRY: 3
  - &save_gems_cache_ios
    save_cache:
      key: ios-gems-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &save_gems_cache_android
    save_cache:
      key: android-gems-{{ checksum "Gemfile.lock" }}
      paths:
        - vendor/bundle
  - &node_restore_cache
    restore_cache:
      key: node-{{ checksum "./yarn.lock" }}
  - &node_artifactory_authenticate
    run:
      name: Authenticate with Artifactory
      command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
  - &node_artifactory_set_registry
    run:
      name: set Registry to use Artifactory
      command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
  - &node_install
     run:
      name: Install node dependencies
      command: yarn install
  - &node_save_cache
    save_cache:
      key: node-{{ checksum "./yarn.lock" }}
      paths:
        - ~/nodes_modules

  - &gradle_restore_cache
    restore_cache:
      key: android-jars-v1-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}
  - &gradle_depencencies
    run:
      name: Download Dependencies
      command: cd android && ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
  - &gradle_save_cache
    save_cache:
      key: android-jars-v1-{{ checksum "./android/build.gradle" }}-{{ checksum  "./android/app/build.gradle" }}
      paths:
        - ~/android/.gradle
        - ~/android/.m2
  - &set_staging_env
      run:
        name: Set staging environment
        command: |
          cd ~/pillarwallet
          git config user.email "devops@pillar.io"
          git config user.name "Issabot"
          npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$CIRCLE_BUILD_NUM
          export buildNumber=$(node -e "console.log(require('./package.json').version);")
          rm .env
          cp environments/.env.staging ./.env
          sed -i.bak "s/_build_number_/$buildNumber/g" .env
          sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
          sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
          echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt

# Default for iOS Build machine
defaults_ios: &defaults_ios
  working_directory: ~/pillarwallet
  macos:
    xcode: "9.4.0"
  environment:
    FL_OUTPUT_DIR: output
    _JAVA_OPTIONS: "-Xms128m -Xmx3024m"
    GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx1248m -XX:+HeapDumpOnOutOfMemoryError"'
  resource_class: large
  shell: /bin/bash --login -o pipefail

# Default for Android Build machine
defaults_android: &defaults_android
    working_directory: ~/pillarwallet
    resource_class: large
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3072m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3072m -Dfile.encoding=UTF-8"'
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8



jobs:
  build-and-test:
    <<: *defaults_ios
    steps:
      - checkout
      - run:
          name: Save build number
          command: |
            APP_BUILD_NUMBER=${CIRCLE_BUILD_NUM}
            mkdir -p /tmp/workspace/build-num
            cd /tmp/workspace/build-num
            echo ${APP_BUILD_NUMBER} > app_build_number.txt
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - build-num
      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
      - *node_install
      - *node_save_cache
      - run:
          name: Run validation
          command: yarn validate

  dev_build_ios:
    <<: *defaults_ios
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
      - *node_install
      - *node_save_cache

      - *restore_gems_cache_ios
      - *install_gems_ios
      - *save_gems_cache_ios

      - *restore_pod_cache
      - *install_pods
      - *save_pod_cache

      - run:
          name: Set staging environment
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - run:
          name: Upload to Hockeyapp
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ios && bundle exec fastlane deploy_ios_hockeyapp APP_BUILD_NUMBER:$APP_BUILD_NUMBER build_number:$buildNumber APP_NAME:"Pillar Staging"
      - run:
          name: prepare to archive ipa file
          command: |
            mkdir -p ./toArchive
            cp ./ios/pillarwallet-staging.ipa ./toArchive
      - store_artifacts:
          path: ./toArchive
          destination: app_build

  dev_build_android:
    <<: *defaults_android
    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - *node_restore_cache
      - *node_artifactory_authenticate
      - *node_artifactory_set_registry
      - *node_install
      - *node_save_cache

      - *restore_gems_cache_android
      - *install_gems_android
      - *save_gems_cache_android

      - *gradle_restore_cache

      - run:
          name: Install Python
          command: sudo apt-get update && sudo apt-get install python
      - run:
          name: Install Python dependencies
          command: sudo apt-get update && sudo apt-get install -y python-pip && sudo apt-get install -y libxml2-dev libxslt1-dev build-essential python-dev libssl-dev
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli

      - run:
          name: Get keystore file
          command: |
            cd /home/circleci/pillarwallet/android/
            export AWS_ACCESS_KEY_ID=$NONPROD_APP_STORE_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$NONPROD_APP_STORE_SECRET_KEY_ID
            aws s3 cp s3://pillar-app-keystore-eu-west-2-861741397496/staging-key.keystore .
      - run:
          name: Accept Android SDK licenses
          command: |
            yes | sdkmanager --licenses || exit 0
      - run:
          name: Accept Android SDK licenses 2
          command: |
            yes | sdkmanager --update || exit 0
      - *gradle_depencencies
      - *gradle_save_cache

      - run:
          name: Set staging environment
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm --no-git-tag-version version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - run:
          name: Initial build
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd android && ./gradlew clean assembleProdStaging --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$APP_BUILD_NUMBER
      - run:
          name: Upload to Hockeyapp
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            export ENVFILE=$(echo ~/pillarwallet/.env)
            cd android && bundle exec fastlane deploy_android_hockeyapp
      - store_artifacts:
          path: android/app/build/outputs/apk
          destination: apks

  stage_ios:
    working_directory: ~/pillarwallet
    macos:
      xcode: "9.4.0"
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Append circleCI build number to version
          command: |
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/nodes_modules
      - restore_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Install CocoaPods
          command: cd ios && pod install --verbose
      - save_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
          paths:
            - ./ios/Pods
      - run:
          name: Install Bundler
          command: sudo gem install bundler
      - restore_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
      - run:
          name: Create Vendor/bundle for gem dependencies
          command: cd ios && bundle check || bundle install --path vendor/bundle
      - run:
          name: Install fastlane as a dependency
          command: cd ios && sudo bundle update
      - save_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
          paths:
            - vendor/bundle
      - run:
          name: Upload to TestFlight
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ios && bundle exec fastlane deploy_staging APP_BUILD_NUMBER:$APP_BUILD_NUMBER build_number:$buildNumber APP_NAME:"Pillar Staging"
      - run:
          name: Copy staging iOS artifact to S3
          command: |
            export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
            cd ./ios/
            touch ios-s3-URL-qa.txt
            aws s3 cp pillarwallet-staging.ipa $PILLAR_QA_ARTIFACTS_BUCKET/pillarwallet-ios-staging-$APP_BUILD_NUMBER.ipa --region eu-west-2
            aws s3 presign $PILLAR_QA_ARTIFACTS_BUCKET/pillarwallet-ios-staging-$APP_BUILD_NUMBER.ipa --expires-in 604800 --region eu-west-2 > ios-s3-URL-qa.txt
      - run:
           name: Announce Deployment
           command: |
             chmod +x .circleci/announceDeployment.sh
             .circleci/announceDeployment.sh "Pillar Wallet" "Staging TestFlight" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce staging iOS URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "staging" "iOS" "$(cat ~/pillarwallet/ios/ios-s3-URL-qa.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: prepare to archive ipa file
          command: |
            mkdir -p ./toArchive
            cp ./ios/pillarwallet-staging.ipa ./toArchive
      - store_artifacts:
          path: ./toArchive
          destination: app_build

  stage_android:
    working_directory: ~/pillarwallet/android
    resource_class: large
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3072m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3072m -Dfile.encoding=UTF-8"'
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    steps:
      - checkout:
          path: ~/pillarwallet
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - run:
          name: Install Python
          command: sudo apt-get update && sudo apt-get install python
      - run:
          name: Install Python dependencies
          command: sudo apt-get update && sudo apt-get install -y python-pip && sudo apt-get install -y libxml2-dev libxslt1-dev build-essential python-dev libssl-dev
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Get keystore file
          command: |
            cd /home/circleci/pillarwallet/android/
            export AWS_ACCESS_KEY_ID=$NONPROD_APP_STORE_ACCESS_KEY
            export AWS_SECRET_ACCESS_KEY=$NONPROD_APP_STORE_SECRET_KEY_ID
            aws s3 cp s3://pillar-app-keystore-eu-west-2-861741397496/staging-key.keystore .
      - run:
          name: Append circleCI build number to version
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.staging ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: android-node-{{ checksum "../yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: cd .. && curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: cd .. && npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
            name: set Yarn to use Artifactory
            command: cd .. && echo 'registry "https://pillarproject.jfrog.io/pillarproject/api/npm/npm/"' >> ~/pillarwallet/.yarnrc
      - run:
          name: Install node dependencies
          command: cd .. && yarn install
      - save_cache:
          key: android-node-{{ checksum "../yarn.lock" }}
          paths:
            - ~/pillarwallet/nodes_modules
      - restore_cache:
          key: android-gems-{{ checksum "Gemfile" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: android-gems-{{ checksum "Gemfile" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: android-jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
      - run:
          name: Chmod permissions
          command: sudo chmod +x ./gradlew
      - run:
          name: Accept Android SDK licenses
          command: |
            yes | sdkmanager --licenses || exit 0
      - run:
          name: Accept Android SDK licenses 2
          command: |
            yes | sdkmanager --update || exit 0
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
      - save_cache:
          key: android-jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
          paths:
            - ~/.gradle
            - ~/.m2
      - run:
          name: Initial build
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            ./gradlew clean assembleProdStaging --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$APP_BUILD_NUMBER
      - run:
          name: Fastlane deploy to Google Play
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            export GOOGLE_JSON_DATA=$(echo "$GOOGLE_JSON_BASE64_ENCODED" | base64 --decode)
            bundle exec fastlane supply init --package_name 'com.pillarproject.wallet.staging' --track internal --json_key_data="$GOOGLE_JSON_DATA"
            bundle exec fastlane deploy_staging --verbose
          environment:
            BUNDLE_PATH: vendor/bundle
      - store_artifacts:
          path: app/build/outputs/apk
          destination: apks
      - run:
          name: Copy stage android artifact to S3
          command: |
            export AWS_ACCESS_KEY_ID=$STAGING_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$STAGING_AWS_SECRET_ACCESS_KEY
            cd /home/circleci/pillarwallet/android/app/build/outputs/apk/
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            touch android-s3-URL-qa.txt
            aws s3 cp app-prod-staging.apk $PILLAR_QA_ARTIFACTS_BUCKET/pillarwallet-android-staging-$APP_BUILD_NUMBER.apk --region eu-west-2
            aws s3 presign $PILLAR_QA_ARTIFACTS_BUCKET/pillarwallet-android-staging-$APP_BUILD_NUMBER.apk --expires-in 604800 --region eu-west-2 > android-s3-URL-qa.txt
      - run:
          name: Announce Deployment
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceDeployment.sh
            .circleci/announceDeployment.sh "Pillar Wallet" "Staging Google Play Store" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce Stage Android URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "staging" "android" "$(cat /home/circleci/pillarwallet/android/app/build/outputs/apk/android-s3-URL-qa.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"

  prod_ios:
    working_directory: ~/pillarwallet
    macos:
      xcode: "9.4.0"
    environment:
      FL_OUTPUT_DIR: output
    shell: /bin/bash --login -o pipefail

    steps:
      - checkout
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Append circleCI build number to version
          command: |
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.production ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
          name: Install node dependencies
          command: yarn install
      - save_cache:
          key: ios-node-{{ checksum "./yarn.lock" }}
          paths:
            - ~/nodes_modules
      - restore_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
      - run:
          name: Fetch CocoaPods Specs
          command: |
            curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      - run:
          name: Install CocoaPods
          command: cd ios && pod install --verbose
      - save_cache:
          key: ios-pods-{{ checksum "./ios/Podfile.lock" }}
          paths:
            - ./ios/Pods
      - run:
          name: Install Bundler
          command: sudo gem install bundler
      - restore_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
      - run:
          name: Create Vendor/bundle for gem dependencies
          command: cd ios && bundle check || bundle install --path vendor/bundle
      - run:
          name: Install fastlane as a dependency
          command: cd ios && sudo bundle update
      - save_cache:
          key: ios-gems-{{ checksum "./ios/Gemfile" }}
          paths:
            - vendor/bundle
      - run:
          name: Upload to TestFlight
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ios && bundle exec fastlane deploy_prod APP_BUILD_NUMBER:$APP_BUILD_NUMBER build_number:$buildNumber APP_NAME:"Pillar Wallet"
      - run:
          name: Copy production iOS artifact to S3
          command: |
            export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd ./ios/
            touch ios-s3-URL-prod.txt
            aws s3 cp pillarwallet.ipa $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-ios-prod-$APP_BUILD_NUMBER.ipa --region eu-west-2
            aws s3 presign $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-ios-prod-$APP_BUILD_NUMBER.ipa --expires-in 604800 --region eu-west-2 > ios-s3-URL-prod.txt
      - run:
           name: Announce Deployment
           command: |
             chmod +x .circleci/announceProdBuilds.sh
             .circleci/announceProdBuilds.sh "Pillar Wallet" "Production TestFlight" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce production iOS URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "production" "ios" "$(cat ~/pillarwallet/ios/ios-s3-URL-prod.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: prepare to archive ipa file
          command: |
            mkdir -p ./toArchive
            cp ./ios/pillarwallet.ipa ./toArchive
      - store_artifacts:
          path: ./toArchive
          destination: app_build

  prod_android:
    working_directory: ~/pillarwallet/android
    resource_class: large
    docker:
      - image: circleci/android:api-26-node8-alpha
    environment:
      TERM: dumb
      _JAVA_OPTIONS: "-Xmx3072m -XX:+UnlockExperimentalVMOptions -XX:+UseCGroupMemoryLimitForHeap"
      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3072m -Dfile.encoding=UTF-8"'
      LC_ALL: en_US.UTF-8
      LANG: en_US.UTF-8
    steps:
      - checkout:
          path: ~/pillarwallet
      - attach_workspace: &attach_workspace
          at: /tmp/workspace
      - run:
          name: Install Python
          command: sudo apt-get update && sudo apt-get install python
      - run:
          name: Install Python dependencies
          command: sudo apt-get update && sudo apt-get install -y python-pip && sudo apt-get install -y libxml2-dev libxslt1-dev build-essential python-dev libssl-dev
      - run:
          name: Install AWS CLI
          command: sudo pip install awscli
      - run:
          name: Get keystore file
          command: |
            cd /home/circleci/pillarwallet/android/
            export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
            aws s3 cp s3://pillar-prod-app-keystore-eu-west-2-304069782345/release.keystore .
      - run:
          name: Append circleCI build number to version
          command: |
            cd ~/pillarwallet
            git config user.email "devops@pillar.io"
            git config user.name "Issabot"
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            npm version $(node -e "const currentVersion=require('./package.json').version; const firstTwoDots=currentVersion.substring(0, currentVersion.lastIndexOf('.')+1); console.log(firstTwoDots);")$APP_BUILD_NUMBER
            export buildNumber=$(node -e "console.log(require('./package.json').version);")
            rm .env
            cp environments/.env.production ./.env
            sed -i.bak "s/_build_number_/$buildNumber/g" .env
            sed -i.bak "s/_open_sea_api_key_/$OPEN_SEA_API_KEY/g" .env
            sed -i.bak "s/_infura_project_id_/$INFURA_PROJECT_ID/g" .env
            echo "$buildNumber" >> ~/pillarwallet/buildNumber.txt
      - restore_cache:
          key: android-node-{{ checksum "../yarn.lock" }}
      - run:
            name: Authenticate with Artifactory
            command: cd .. && curl -u $ARTIFACTORY_PUBLISHING_USER:$ARTIFACTORY_PUBLISHING_PASSWORD https://pillarproject.jfrog.io/pillarproject/api/npm/auth >> ~/pillarwallet/.npmrc
      - run:
            name: set Registry to use Artifactory
            command: cd .. && npm config set registry https://pillarproject.jfrog.io/pillarproject/api/npm/npm/
      - run:
            name: set Yarn to use Artifactory
            command: cd .. && echo 'registry "https://pillarproject.jfrog.io/pillarproject/api/npm/npm/"' >> ~/pillarwallet/.yarnrc
      - run:
          name: Install node dependencies
          command: cd .. && yarn install
      - save_cache:
          key: android-node-{{ checksum "../yarn.lock" }}
          paths:
            - ~/pillarwallet/nodes_modules
      - restore_cache:
          key: android-gems-{{ checksum "Gemfile" }}
      - run:
          name: Bundle install
          command: bundle check || bundle install --path vendor/bundle
      - save_cache:
          key: android-gems-{{ checksum "Gemfile" }}
          paths:
            - vendor/bundle
      - restore_cache:
          key: android-jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
      - run:
          name: Chmod permissions
          command: sudo chmod +x ./gradlew
      - run:
          name: Accept Android SDK licenses
          command: |
            yes | sdkmanager --licenses || exit 0
      - run:
          name: Accept Android SDK licenses 2
          command: |
            yes | sdkmanager --update || exit 0
      - run:
          name: Download Dependencies
          command: ./gradlew androidDependencies --no-daemon --stacktrace --max-workers=2
      - save_cache:
          key: android-jars-{{ checksum "build.gradle" }}-{{ checksum "app/build.gradle" }}
          paths:
            - ~/.gradle
            - ~/.m2
      - run:
          name: Initial build
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            ./gradlew clean assembleProdRelease --no-daemon --stacktrace --max-workers=2 -PBUILD_NUMBER=$APP_BUILD_NUMBER
      - run:
          name: Fastlane deploy to Google Play
          command: |
            export buildNumber=$(cat ~/pillarwallet/buildNumber.txt)
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            export GOOGLE_JSON_DATA=$(echo "$GOOGLE_JSON_BASE64_ENCODED" | base64 --decode)
            bundle exec fastlane supply init --package_name 'com.pillarproject.wallet' --track internal --json_key_data="$GOOGLE_JSON_DATA"
            bundle exec fastlane deploy_internal --verbose
          environment:
            BUNDLE_PATH: vendor/bundle
      - store_artifacts:
          path: app/build/outputs/apk
          destination: apks
      - run:
          name: Copy prod android artifact to S3
          command: |
            export AWS_ACCESS_KEY_ID=$PRODUCTION_AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$PRODUCTION_AWS_SECRET_ACCESS_KEY
            export APP_BUILD_NUMBER="$(cat /tmp/workspace/build-num/app_build_number.txt)"
            cd /home/circleci/pillarwallet/android/app/build/outputs/apk/
            touch android-s3-URL-prod.txt
            aws s3 cp app-prod-release.apk $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-android-prod-$APP_BUILD_NUMBER.apk --region eu-west-2
            aws s3 presign $PILLAR_PROD_ARTIFACTS_BUCKET/pillarwallet-android-prod-$APP_BUILD_NUMBER.apk --expires-in 604800 --region eu-west-2 > android-s3-URL-prod.txt
      - run:
          name: Announce Deployment
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceProdBuilds.sh
            .circleci/announceProdBuilds.sh "Pillar Wallet" "Production Google Play Store" "$(cat /tmp/workspace/build-num/app_build_number.txt)"
      - run:
          name: Announce Prod Android URL
          command: |
            cd ~/pillarwallet
            chmod +x .circleci/announceURLs.sh
            .circleci/announceURLs.sh "pillarwallet" "production" "android" "$(cat /home/circleci/pillarwallet/android/app/build/outputs/apk/android-s3-URL-prod.txt)" "$(cat /tmp/workspace/build-num/app_build_number.txt)"

  whitesource:
    working_directory: ~/pillarwallet
    docker:
      - image: circleci/openjdk:8-node-browsers
    steps:
      - checkout
      - attach_workspace:
          at: ~/pillarwallet/workspace
      - run :
          name: Setup WhiteSource
          command: curl -LJO https://github.com/whitesource/fs-agent-distribution/raw/master/standAlone/wss_agent.sh
      - run:
          name: execute whitesource
          command: |
            cd .whitesource/
            chmod +x wss_agent.sh && ./wss_agent.sh -apiKey $WHITESOURCE_API_KEY -c ./whitesource-fs-agent.config  -project pillarwallet -f files.list

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-and-test
      - whitesource
      - dev_build_ios:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - develop
      - dev_build_android:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - develop
      - stage_ios:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - master
      - stage_android:
          requires:
            - build-and-test
          filters:
            branches:
              only:
                  - master
      - release_to_prod:
          type: approval
          requires:
            - stage_android
      - prod_ios:
          requires:
            - release_to_prod
      - prod_android:
          requires:
            - release_to_prod
